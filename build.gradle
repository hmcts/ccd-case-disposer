plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.springframework.boot' version '3.3.2'
  id 'org.owasp.dependencycheck' version '10.0.3'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.1.0.4882'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'io.freefair.lombok' version '8.7.1'
  id 'org.flywaydb.flyway' version '10.17.1'
  id "info.solidsoft.pitest" version '1.15.0'
  id "au.com.dius.pact" version '4.6.13'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }

}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    failFast = true
}


task functional(type: Test) {
    description = "Runs functional tests"
    group = "Verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = true
    mustRunAfter test
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // The line below prevents the build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}

task checkoutDataStoreMigrationScripts (type: Exec){
   executable "src/integrationTest/resources/scripts/checkout-datastore-db-scripts.sh"
   outputs.upToDateWhen { false }
}

//**** Uncomment this line to checkout latest data-store-api migration scripts *****
//integration.dependsOn(checkoutDataStoreMigrationScripts)

check.dependsOn integration

checkstyle {
  maxWarnings = 0
  toolVersion = '10.17.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
    //sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest]
    sourceSets = []
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.required = true
        csv.required = false
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: ccd-case-disposer"
        property "sonar.projectKey", "uk.gov.hmcts.reform:ccd-case-disposer"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.coverage.exclusions", "**/ccd/ApplicationBootstrap.java"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

dependencyManagement {
    dependencies {
        dependency group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: '1.78.1'
        dependencySet(group: 'org.springframework.cloud', version: '4.1.3') {
            entry 'spring-cloud-starter-openfeign'
            entry 'spring-cloud-openfeign-core'
        }
        dependencySet(group: 'org.yaml', version: '2.2') {
            entry 'snakeyaml'
        }
        dependencySet(group: 'ch.qos.logback', version: '1.5.7') {
          entry 'logback-core'
          entry 'logback-classic'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

pitest {
    junit5PluginVersion.set('1.2.1')
    targetClasses = ['uk.gov.hmcts.reform.*']
    excludedClasses = [
            'uk.gov.hmcts.reform.ccd.madeup.*'
    ]
    threads = 10
    enableDefaultIncrementalAnalysis = true
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50
    timeoutConstInMillis = 30000
    mutators.set([
            'CONDITIONALS_BOUNDARY',
            'INCREMENTS',
            'INVERT_NEGS',
            'MATH',
            'NEGATE_CONDITIONALS',
            'VOID_METHOD_CALLS',
            'EMPTY_RETURNS',
            'FALSE_RETURNS',
            'NULL_RETURNS',
            'PRIMITIVE_RETURNS',
            'TRUE_RETURNS',
            'REMOVE_CONDITIONALS'
    ])
}

project.tasks['pitest'].group = "Verification"

def versions = [
    apiGuardian         : '1.1.2',
    commonsIo           : '2.16.1',
    elasticsearch       : '7.17.23',
    flyway              : '10.17.1',
    gradlePitest        : '1.15.0',
    idamClient          : '3.0.3',
    jersey              : '3.1.8',
    junit               : '5.10.3',
    junitPlatform       : '1.9.2',
    lombok              : '1.18.34',
    pitest              : '1.16.1',
    reformLogging       : '6.1.6',
    restAssured         : '5.5.0',
    s2sClient           : '5.2.0',
    sonarPitest         : '0.5',
    springBoot          : springBoot.class.package.implementationVersion,
    springFramework     : '6.1.12',
    springSecurity      : '6.3.1',
    testcontainers      : '1.20.1',
    wiremock            : '3.0.1',
    pactVersion         : '4.6.13',
    serenity            : '3.1.20',
]

ext['jackson.version'] = '2.16.0'
project.ext.pacticipantVersion = getCheckedOutGitCommitHash()

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}
rootProject.tasks.named("processContractTestResources") {
  duplicatesStrategy = 'include'
}

dependencies {

    modules {
      module("com.google.collections:google-collections") {
        replacedBy("com.google.guava:guava", "google-collections is part of guava")
      }
    }

    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    implementation group: 'org.springframework', name:'spring-webmvc', version: versions.springFramework
    implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurity
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: versions.jersey
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: versions.jersey
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: versions.jersey
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: versions.jersey
    implementation group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '4.0.0'
    implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '3.0.0'
    implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'
    implementation group: 'com.github.hmcts', name: 'idam-java-client', version: versions.idamClient
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.s2sClient
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'
    implementation group: 'com.google.guava', name: 'guava', version: '33.2.1-jre'
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
    implementation group: 'commons-net', name: 'commons-net', version: '3.11.1'
    implementation group: 'com.massisframework', name: 'j-text-utils', version: '0.3.4', {
      exclude group: 'com.google.guava', module: 'guava'
    }

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.0'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.5.4'

    implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: 'org.elasticsearch', name: 'elasticsearch', version: versions.elasticsearch
    implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: versions.elasticsearch
    implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: versions.elasticsearch

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.testcontainers
    testImplementation group: 'org.testcontainers', name: 'elasticsearch', version: versions.testcontainers
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.2'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: versions.wiremock
    testImplementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway
    testImplementation group: 'com.pivovarit', name: 'throwing-function', version: '1.5.1'
    testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'
    testImplementation 'com.github.hmcts:fortify-client:1.4.4:all'
    testRuntimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flyway

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    functionalTestCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: versions.apiGuardian
    integrationTestCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: versions.apiGuardian

    //pact contract testing
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pactVersion
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pactVersion
    contractTestRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit)
    contractTestImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit)

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath
}

application {
  mainClass = 'uk.gov.hmcts.reform.ccd.ApplicationBootstrap'
}


pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'build/pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}

task runAndPublishConsumerPactTests(type: Test){
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  finalizedBy(pactPublish)
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
  description = "Runs the consumer Pact tests"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task runProviderPactVerification(type: Test) {
  logger.lifecycle("Runs provider pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
  systemProperty 'pact.provider.version', project.pacticipantVersion
}

runProviderPactVerification.dependsOn contract
runProviderPactVerification.finalizedBy pactVerify

bootJar {
    getArchiveFileName().set(provider {
        'ccd-case-disposer.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
