plugins {
    id 'application'
    id 'checkstyle'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.springframework.boot' version '2.7.0'
    id 'org.owasp.dependencycheck' version '8.0.2'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'uk.gov.hmcts.java' version '0.12.27'
    id 'io.freefair.lombok' version '6.5.1'
    id 'org.flywaydb.flyway' version '8.2.2'
    id "info.solidsoft.pitest" version '1.7.4'
}

apply plugin: "info.solidsoft.pitest"

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

test {
    failFast = true
}


task functional(type: Test) {
    description = "Runs functional tests"
    group = "Verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
    description = "Runs integration tests"
    group = "Verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    failFast = true
    mustRunAfter test
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  // The line below prevents the build from failing if the Fortify scan detects issues
  ignoreExitValue = true
}

task checkoutDataStoreMigrationScripts (type: Exec){
   executable "src/integrationTest/resources/scripts/checkout-datastore-db-scripts.sh"
   outputs.upToDateWhen { false }
}

//**** Uncomment this line to checkout latest data-store-api migration scripts *****
//integration.dependsOn(checkoutDataStoreMigrationScripts)

check.dependsOn integration

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
    //sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest]
    sourceSets = []
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: ccd-case-disposer"
        property "sonar.projectKey", "uk.gov.hmcts.reform:ccd-case-disposer"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.coverage.exclusions", "**/ccd/ApplicationBootstrap.java"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

// before committing a change, make sure task still works
dependencyUpdates {
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
        def regex = /^[0-9,.v-]+$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
        return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

dependencyManagement {
    dependencies {
        dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.69'
        // CVE-2018-10237 - Unbounded memory allocation
        dependencySet(group: 'com.google.guava', version: '31.1-jre') {
            entry 'guava'
        }
        dependencySet(group: 'org.springframework.cloud', version: '3.1.2') {
            entry 'spring-cloud-starter-openfeign'
            entry 'spring-cloud-openfeign-core'
        }
        dependencySet(group: 'org.yaml', version: '1.33') {
            entry 'snakeyaml'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

pitest {
    pitestVersion.set('1.7.4')
    junit5PluginVersion.set('0.15')
    targetClasses = ['uk.gov.hmcts.reform.*']
    excludedClasses = [
            'uk.gov.hmcts.reform.ccd.madeup.*'
    ]
    threads = 10
    enableDefaultIncrementalAnalysis = true
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50
    timeoutConstInMillis = 30000
    mutators.set([
            'CONDITIONALS_BOUNDARY',
            'INCREMENTS',
            'INVERT_NEGS',
            'MATH',
            'NEGATE_CONDITIONALS',
            'VOID_METHOD_CALLS',
            'EMPTY_RETURNS',
            'FALSE_RETURNS',
            'NULL_RETURNS',
            'PRIMITIVE_RETURNS',
            'TRUE_RETURNS',
            'REMOVE_CONDITIONALS'
    ])
}

project.tasks['pitest'].group = "Verification"

def versions = [
     junit               : '5.9.2',
     junitPlatform       : '1.9.2',
     reformLogging       : '5.1.9',
     elasticsearch       : '7.17.9',
     testcontainers      : '1.17.6',
     restAssured         : '4.5.1',
     idamClient          : '2.0.1',
     s2sClient           : '4.0.3',
     commonsIo           : '2.7',
     wiremock            : '2.35.0',
     lombok              : '1.18.22',
     gradlePitest        : '1.9.0',
     pitest              : '1.9.11',
     sonarPitest         : '0.5',
     springFramework     : '5.3.20',
     apiGuardian         : '1.0.0',
     springBoot          : springBoot.class.package.implementationVersion,
]

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

ext['spring-framework.version'] = '5.3.20'
ext['log4j2.version'] = '2.17.1'
ext['jackson.version'] = '2.14.1'

dependencies {

    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured

    implementation group: 'org.springframework', name:'spring-webmvc', version: versions.springFramework

    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.25.1'
    implementation group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.25.1'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.25.1'

    implementation group: 'com.github.hmcts', name: 'idam-java-client', version: versions.idamClient
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.s2sClient
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'

    implementation group: 'com.massisframework', name: 'j-text-utils', version: '0.3.4'
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    configurations {
        compile.exclude module: 'spring-boot-starter-logging'
    }
    implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.7.5'

    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
    implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging

    // CVE-2021-42550
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.10'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.10'

    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.5.7.Final'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.1'

    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation group: 'org.elasticsearch', name: 'elasticsearch', version: versions.elasticsearch
    implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: versions.elasticsearch
    implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: versions.elasticsearch
    testImplementation libraries.junit5
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.testcontainers
    testImplementation group: 'org.testcontainers', name: 'elasticsearch', version: versions.testcontainers
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '3.0.0'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: versions.wiremock
    testImplementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.13'


    testImplementation group: 'com.pivovarit', name: 'throwing-function', version: '1.5.1'

    testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    testImplementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'
    testImplementation 'com.github.hmcts:fortify-client:1.3.0:all'

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath

    functionalTestCompileOnly group: 'org.apiguardian', name: 'apiguardian-api' , version: versions.apiGuardian
    integrationTestCompileOnly group: 'org.apiguardian', name: 'apiguardian-api' , version: versions.apiGuardian
}

mainClassName = 'uk.gov.hmcts.reform.ccd.ApplicationBootstrap'

bootJar {
    getArchiveFileName().set(provider {
        'ccd-case-disposer.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

